# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Packer build CI

on:
  push:
    branches: ["main"]

jobs:
  packer:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy all files
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip webapp/

      - name: Delete copied files
        run: rm -rf webapp && ls -R

      - name: Run unit tests
        run: npm install && npm run test

      - name: Setup `awscli`
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: "packer init ./src/infra/ami.pkr.hcl"

      - name: Run `packer validate`
        id: validate
        run: >
          cd src/infra/ &&
          packer validate -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}'
          -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          -var 'db_password=${{ secrets.DB_PASSWORD }}'
          -var 'ami_users=${{ secrets.AMI_USERS}}'
          ami.pkr.hcl

      - name: Run `packer build`
        id: build
        run: >
          cd src/infra/ &&
          packer build -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}'
          -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          -var 'db_password=${{ secrets.DB_PASSWORD }}'
          -var 'ami_users=${{ secrets.AMI_USERS}}'
          -var 'aws_region=${{ vars.AWS_REGION }}'
          -var 'subnet_id=${{ vars.DEFAULT_SUBNET_ID }}'
          ami.pkr.hcl

      - name: Update launch template with the new AMI
        id: updating
        run: |
          echo "Deploying Packer Build"
          AMI_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)
          echo "$AMI_ID"
          echo "ami=$AMI_ID" >> "$GITHUB_OUTPUT"

  update_launch_template:
    needs: packer
    runs-on: ubuntu-latest

    steps:
      - name: Setup `awscli`
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: describe launch template
        id: configuring
        run: |
          aws --version
          aws ec2 describe-launch-templates
          aws ec2 create-launch-template-version --launch-template-data '{"ImageId":"${{ needs.packer.outputs.ami_id }}"}' --source-version 1 --launch-template-id ${{ vars.LAUNCH_TEMPLATE_ID }}  --no-cli-pager

      - name: start instance refresh
        id: refreshing
        run: "aws autoscaling start-instance-refresh --auto-scaling-group-name csye6225-asg-spring2023"
